#! /usr/bin/env bash
BASEDIR=$(dirname $0); cd $BASEDIR

. ./.libs/funcs
. ./env-vars

_require_var WORKSPACE_HOME
_require_var UPDATE_REPOS_FILE
_require_var UPDATE_COMMANDS_FILE

_usage() {
    echo "Update installed packages, scripts and synchronized files."
    echo ;
    echo "Usage: $0 [<option>]*"
    echo "Option:"
    echo "    -h: Displays this help message"
    exit 0
}

while getopts "h" opt; do
    case "$opt" in
        h)
            _usage
            ;;
    esac
done



echo "Updating packages:"
echo -e "$( hostnamectl | grep 'Operating System:' )"

if [ -n "$( type -t apt )" ]; then

    sudo -l 1>/dev/null
    if [ $? -ne 0 ] || ! [ "$( sudo whoami )" = "root" ]; then
        echo "Execute:"
        echo "> su \$USER"
        echo "[Process stopped]: $0"
        exit 0
    fi

    echo ;
    echo "Updating 'apt' packages"

    sudo apt update
    sudo apt upgrade -y

    echo "Cleaning up 'apt' packages"

    sudo apt clean all -y
    sudo apt autoclean -y
    sudo apt autoremove --purge -y
fi

if [ -n "$( type -t dnf )" ]; then
    echo ;
    echo "Updating 'dnf' packages"

    sudo dnf check-update
    sudo dnf upgrade -y
fi

_print_cmds=()

if [ -f "$UPDATE_COMMANDS_FILE" ]; then
    while IFS= read -r line || [ -n "$line" ]; do
        _cmd=$( echo "${line//[$'\t\r\n']}" )
        _exe=$( cut -d : -f 1 <<< "$_cmd" )

        if [ "$_exe" = "p" ]; then
            _cmd=$( echo "$_cmd" | cut -b 3- )
            _print_cmds+=( "$_cmd" )
        else
            echo ;
            echo "Executing: [$_cmd]"
            eval "$_cmd"
        fi
    done < $UPDATE_COMMANDS_FILE
fi

_print_repos=()

if [ -n "$( type -t git )" ] && [ -f "$UPDATE_REPOS_FILE" ]; then
    while IFS= read -r line || [ -n "$line" ]; do
        _repo=$( eval echo "${line//[$'\t\r\n']}" )
        _exe=$( cut -d : -f 1 <<< "$_repo" )
        _branch=$( cut -d : -f 2 <<< "$_repo" )
        _loc=$( cut -d : -f 3 <<< "$_repo" )

        if ! [ -d "$_loc" ]; then
            echo ;
            echo "'$_loc' is not a directory"
            continue
        fi
        if [ -h "$_loc" ]; then
            echo ;
            echo "'$_loc' is a symlink"
            continue
        fi

        cd "$_loc"

        if [ "$_exe" = "e" ]; then
            echo ;
            echo "Updating $(basename $_loc)"

            git checkout $_branch
            git pull origin $_branch
        else
            _print_repos+=( "$_loc" )
        fi
    done < $UPDATE_REPOS_FILE
fi

if [ ${#_print_repos[*]} -gt 0 ]; then
    echo ;
    echo "Update these repos if needed:"

    for _repo in "${_print_repos[@]}"; do
        echo "> $_repo"
    done
fi

if [ ${#_print_cmds[*]} -gt 0 ]; then
    echo ;
    echo "Execute these update commands if needed:"

    for _cmd in "${_print_cmds[@]}"; do
        echo "> $_cmd"
    done
fi

_back

echo ;
echo "[Completed]: $0"
