#! /usr/bin/env bash
BASEDIR=$(dirname $0); cd $BASEDIR

. ./.libs/funcs
. ./env-vars

_require_var WORKSPACE_HOME
_require_var UPDATE_COMMANDS

_usage() {
    echo "Update installed packages, scripts and synchronized files."
    echo ;
    echo "Usage: $0 [<option>]*"
    echo "Option:"
    echo "    -h: Displays this help message"
    exit 0
}

while getopts "h" opt; do
    case "$opt" in
        h)
            _usage
            ;;
    esac
done



echo "Updating packages:"
echo -e "$( hostnamectl | grep 'Operating System:' )"

if [ -n "$( type -t apt )" ]; then

    sudo -l 1>/dev/null
    if [ $? -ne 0 ] || ! [ "$( sudo whoami )" = "root" ]; then
        echo "Execute:"
        echo "> su \$USER"
        echo "[Process stopped]: $0"
        exit 0
    fi

    echo ;
    echo "Updating 'apt' packages"

    sudo apt update
    sudo apt upgrade -y
fi

if [ -n "$( type -t dnf )" ]; then
    echo ;
    echo "Updating 'dnf' packages"

    sudo dnf check-update
    sudo dnf upgrade -y
fi

_print_cmds=()

for _cmd in "${UPDATE_COMMANDS[@]}"; do
    _name=$( cut -d : -f 1 <<< "$_cmd" ) 
    _opt=$( cut -d : -f 2 <<< "$_cmd" )
    _exe=$( cut -d : -f 3 <<< "$_cmd" )
    _args=$( cut -d : -f 4 <<< "$_cmd" )

    if [ -n "$( type -t $_name )" ]; then
        echo ;
        echo "Updating '$_name' package"

        case "$_opt" in
            s)
                if [ "$_exe" = "e" ]; then
                    sudo $_name $_args
                else
                    _print_cmds+=( "sudo $_name $_args" )
                fi
                ;;
            v)
                eval "__update_with_var=\"\$$_args\""

                if [ "$_exe" = "e" ]; then
                    eval "$__update_with_var"
                else
                    _print_cmds+=( "$__update_with_var" )
                fi
                ;;
            *)
                if [ "$_exe" = "e" ]; then
                    $_name $_args
                else
                    _print_cmds+=( "$_name $_args" )
                fi
                ;;
        esac
    fi
done

if [ -d "$WORKSPACE_HOME/scripts" ]; then
    cd $WORKSPACE_HOME/scripts

    if ! [ -h "$WORKSPACE_HOME/scripts" ] && [ -n "$( type -t git )" ]; then
        echo ;
        echo "Updating scripts"

        git checkout main
        git pull origin main
    fi

    echo ;
    echo "Synchronizing backed up files"
    ./sync-cloud -f
fi

if [ ${#_print_cmds[*]} -gt 0 ]; then
    echo ;
    echo "Execute these update commands if needed:"

    for _cmd in "${_print_cmds[@]}"; do
        echo "> $_cmd"
    done
fi

_back

echo ;
echo "[Completed]: $0"
