#! /usr/bin/env bash
set -e

# ######################### Required variables
# N64_ROMS_HOME=...
# N64_SAVES_HOME=...
# N64_SCREENSHOTS_HOME=...
# GB_GBC_ROMS_HOME=...
# GB_GBC_SAVES_HOME=...

# N64_JOYSTICK_NAMES=( <joystick-name> )
# N64_JOYSTICK_CONFIGS=( <joystick-connection> )

# N64_CONFIGURED_JOYSTICK_DEFAULT=<joystick-index-default>


# ######################### Profile definition
# _pak_game_profile_<game-index>=<pak-value>
# _gfx_game_profile_<game-index>=<gfx-value>
# _emumode_game_profile_<game-index>=<emumode-value>
# _params_game_profile_<game-index>=<params-value>


# ######################### Default values
_controller_names=(
    Input-SDL-Control1
    Input-SDL-Control2
    Input-SDL-Control3
    Input-SDL-Control4
)

_controllers_default=1

_expansion_paks=(
    "1|None"
    "2|Mem pak"
    "4|Transfer pak"
    "5|Rumble pak"
)
_expansion_pak_default="Rumble pak"

_gfx_video_plugins=(
    "mupen64plus-video-glide64mk2"
    "mupen64plus-video-rice"
)
_gfx_video_plugin_default="mupen64plus-video-glide64mk2"

_resolution_default=1024x768

_emulation_modes=(
    "0|Pure Interpreter"
    "1|Cached Interpreter"
    "2|Dynamic Recompiler"
)
_emulation_mode_default="Dynamic Recompiler"


# ######################### Setup functions

_select_rom() {
    local _n64_files=()
    local _n64_idx=1
    local _n64_rom=""

    echo >&2
    echo "Choose an N64 game:" >&2
    for _n64_file in "$N64_ROMS_HOME"/*.n64; do
        _n64_files+=( "$_n64_file" )
        _n64_name=$( basename "$_n64_file" )

        echo "$_n64_idx) $_n64_name" >&2

        _n64_idx=$((_n64_idx+1))
    done
    read -p "n64-index> " _n64_rom_idx

    if [ -z "$_n64_rom_idx" ]; then
        echo "No ROM file selected" >&2
        kill 0
    fi

    _n64_rom="${_n64_files[$((_n64_rom_idx-1))]}"

    if [ -z "$_n64_rom" ]; then
        echo "No ROM file selected" >&2
        kill 0
    fi

    echo "$_n64_rom"
}

_get_expansion_pak_id() {
    local _expansion_pak_name=${1:-}
    local _expansion_pak_id=-1

    for _idx in "${!_expansion_paks[@]}"; do
        local _pak_opt=$( cut -d \| -f 1 <<< "${_expansion_paks[$_idx]}" )
        local _pak_name=$( cut -d \| -f 2 <<< "${_expansion_paks[$_idx]}" )

        echo $_expansion_pak_name $_pak_name $_pak_opt >&2
        if [ "$_expansion_pak_name" = "$_pak_name" ]; then
            _expansion_pak_id=$_pak_opt
        fi
    done

    echo $_expansion_pak_id
}

_select_expansion_pak() {
    local _controller_id=${1:-}
    local _game_idx=${2:-}
    local _pak_game_profile_expansion_pak=$( eval "echo \$_pak_game_profile_$_game_idx" )
    local _pak_default=$_expansion_pak_default
    local _expansion_pak_name=""

    if [ -n "$_pak_game_profile_expansion_pak" ]; then
        _pak_default=$_pak_game_profile_expansion_pak
    fi

    echo >&2
    echo "Choose the Expansion pak for Controller-$_controller_id:" >&2
    for _idx in "${!_expansion_paks[@]}"; do
        local _pak_name=$( cut -d \| -f 2 <<< "${_expansion_paks[$_idx]}" )

        if [ "$_pak_default" = "$_pak_name" ]; then
            echo "$((_idx+1))) (default) $_pak_name" >&2
        else
            echo "$((_idx+1))) $_pak_name" >&2
        fi
    done
    read -p "expansion-pak-num> " _expansion_pak_idx

    if [ -z "$_expansion_pak_idx" ]; then
        _expansion_pak_name=$_pak_default
    else
        _expansion_pak_name=$( cut -d \| -f 2 <<< "${_expansion_paks[$((_expansion_pak_idx-1))]}" )
    fi

    echo $_expansion_pak_name
}

_select_joystick() {
    local _controller_id=${1:-}

    echo >&2
    echo "Choose a configured joystick number for Controller-$_controller_id:" >&2
    for _idx in "${!N64_CONFIGURED_JOYSTICK_NAMES[@]}"; do
        local _joystick_name="${N64_CONFIGURED_JOYSTICK_NAMES[$_idx]}"

        if [ "$N64_CONFIGURED_JOYSTICK_DEFAULT" = "$_idx" ]; then
            echo "$((_idx+1))) (default) $_joystick_name" >&2
        else
            echo "$((_idx+1))) $_joystick_name" >&2
        fi
    done
    read -p "joystick-config-index> " _joystick_config_id

    if [ -z "$_joystick_config" ]; then
        _joystick_config_id=$N64_CONFIGURED_JOYSTICK_DEFAULT
    else
        _joystick_config_id=$((_joystick_config_id-1))
    fi

    echo $_joystick_config_id
}

_setup_transfer_pak() {
    local _controller_id=${1:-}
    local _gc_gbc_files=()
    local _gc_gbc_idx=1
    local _gc_gbc_rom=""

    echo >&2
    echo "Choose a GC/GBC game for Controller-$_controller_id:" >&2
    for _gc_gbc_file in "$GB_GBC_ROMS_HOME"/*.gb*; do
        _gc_gbc_files+=( "$_gc_gbc_file" )
        _gc_gbc_name=$( basename "$_gc_gbc_file" )

        echo "$_gc_gbc_idx) $_gc_gbc_name" >&2

        _gc_gbc_idx=$((_gc_gbc_idx+1))
    done
    read -p "gc-gbc-index> " _gc_gbc_rom_idx

    if [ -z "$_gc_gbc_rom_idx" ]; then
        echo "No GC/GBC file selected" >&2
        kill 0
    fi

    _gc_gbc_rom="${_gc_gbc_files[$((_gc_gbc_rom_idx-1))]}"

    if [ -z "$_gc_gbc_rom" ]; then
        echo "No GC/GBC file selected" >&2
        kill 0
    fi

    echo "$_gc_gbc_rom"
}

_select_video_plugin() {
    local _game_idx=${1:-}
    local _gfx_game_profile_video_plugin=$( eval "echo \$_gfx_game_profile_$_game_idx" )
    local _gfx_default=$_gfx_video_plugin_default

    if [ -n "$_gfx_game_profile_video_plugin" ]; then
        _gfx_default=$_gfx_game_profile_video_plugin
    fi

    echo >&2
    echo "Choose a Video plugin number:" >&2
    for _idx in "${!_gfx_video_plugins[@]}"; do
        local _gfx_name="${_gfx_video_plugins[$_idx]}"

        if [ "$_gfx_default" = "$_gfx_name" ]; then
            echo "$((_idx+1))) (default) $_gfx_name" >&2
        else
            echo "$((_idx+1))) $_gfx_name" >&2
        fi
    done
    read -p "gfx-video-index> " _gfx_video_idx

    if [ -z "$_gfx_video_idx" ]; then
        _gfx_video=$_gfx_default
    else
        _gfx_video="${_gfx_video_plugins[$((_gfx_video_idx-1))]}"
    fi

    echo "$_gfx_video"
}

_select_resolution() {
    echo >&2
    echo "Enter the display resolution [640x480, 800x600, etc.] (default [$_resolution_default]):" >&2
    read -p "resolution> " _resolution

    if [ -z "$_resolution" ]; then
        _resolution="$_resolution_default"
    fi

    echo "$_resolution"
}

_get_emulation_mode_id() {
    local _emulation_mode_name=${1:-}
    local _emumode_id=-1

    for _idx in "${!_emulation_modes[@]}"; do
        local _emumode_opt=$( cut -d \| -f 1 <<< "${_emulation_modes[$_idx]}" )
        local _emumode_name=$( cut -d \| -f 2 <<< "${_emulation_modes[$_idx]}" )

        if [ "$_emulation_mode_name" = "$_emumode_name" ]; then
            _emumode_id=$_emumode_opt
        fi
    done

    echo $_emumode_id
}

_select_emulation_mode() {
    local _game_idx=${1:-}
    local _emumode_game_profile_emulation_mode=$( eval "echo \$_emumode_game_profile_$_game_idx" )
    local _emumode_default=$_emulation_mode_default
    local _emulation_mode_name=""

    if [ -n "$_emumode_game_profile_emulation_mode" ]; then
        _emumode_default=$_emumode_game_profile_emulation_mode
    fi

    echo >&2
    echo "Choose the emulation mode:" >&2
    for _idx in "${!_emulation_modes[@]}"; do
        local _emumode_name=$( cut -d \| -f 2 <<< "${_emulation_modes[$_idx]}" )

        if [ "$_emumode_default" = "$_emumode_name" ]; then
            echo "$((_idx+1))) (default) $_emumode_name" >&2
        else
            echo "$((_idx+1))) $_emumode_name" >&2
        fi
    done
    read -p "emumode-index> " _emumode_idx

    if [ -z "$_emumode_idx" ]; then
        _emulation_mode_name=$_emumode_default
    else
        _emulation_mode_name=$( cut -d \| -f 2 <<< "${_emulation_modes[$((_emumode_idx-1))]}" )
    fi

    echo $_emulation_mode_name
}


# ######################### Setup command

_n64_rom=$( _select_rom )
_n64_name=$( basename "$_n64_rom" )
_n64_game_idx=$( _game_index "$_n64_name" )

echo >&2
echo "Enter the number of controllers [1-4] (default [$_controllers_default]):"
read -p "num-controllers> " _controllers

if [ -z "$_controllers" ]; then
    _controllers=$_controllers_default
fi

_configuration_option_part=""
_plugged_option_part=""
_joystick_option_part=""
_expansion_pak_option_part=""
_expansion_pak_loaded=""
_transfer_pak_option_part=""
_transfer_pak_loaded=""

for (( _controller_idx=0 ; _controller_idx<= $_controllers-1 ; _controller_idx++ )); do
    _controller_name="${_controller_names[$_controller_idx]}"
    _controller_id=$((_controller_idx+1))

    if [ -z "$_controller_name" ]; then
        continue
    fi

    _expansion_pak="$( _select_expansion_pak $_controller_id $_n64_game_idx )"
    _expansion_pak_id=$( _get_expansion_pak_id "$_expansion_pak" )
    echo $_expansion_pak_id
    _joystick_config_idx=$( _select_joystick $_controller_id )
    _joystick_config="${N64_CONFIGURED_JOYSTICK_CONFIGS[$_joystick_config_idx]}"

    if [ $_expansion_pak_id -eq 4 ]; then
        _gb_gbc_rom=$( _setup_transfer_pak $_controller_id )
        _gb_gbc_name=$( basename "$_gb_gbc_rom" )
        _gb_gbc_save="$( echo $_gb_gbc_name | cut -f 1 -d '.' ).sav"

        _transfer_pak_option_part="$_transfer_pak_option_part --gb-rom-$_controller_id \"$_gb_gbc_rom\" --gb-ram-$_controller_id \"$GB_GBC_SAVES_HOME/$_gb_gbc_save\""
        _transfer_pak_loaded="$_transfer_pak_loaded Controller-$_controller_id='$_gb_gbc_name'"
    fi

    _configuration_option_part="$_configuration_option_part --set $_controller_name[mode]=1"
    _plugged_option_part="$_plugged_option_part --set $_controller_name[plugged]=True"
    _joystick_option_part="$_joystick_option_part --set $_controller_name[name]=\"$_joystick_config\""
    _expansion_pak_option_part="$_expansion_pak_option_part --set $_controller_name[plugin]=$_expansion_pak_id"
    _expansion_pak_loaded="$_expansion_pak_loaded Controller-$_controller_id='$_expansion_pak'"
done

_gfx_video_plugin="$( _select_video_plugin $_n64_game_idx )"
_resolution="$( _select_resolution )"
_emulation_mode="$( _select_emulation_mode $_n64_game_idx )"
_emulation_mode_id=$( _get_emulation_mode_id "$_emulation_mode" )

_params_game_profile_parameters=$( eval "echo \$_params_game_profile_$_game_idx" )
_all_parts="$_params_game_profile_parameters $_configuration_option_part $_plugged_option_part $_joystick_option_part $_expansion_pak_option_part $_transfer_pak_option_part"

echo >&2
echo "Loading game..."
echo "N64-Rom='$_n64_name'"
echo "Expansion-pak:$_expansion_pak_loaded"
echo "Transfer-pak:$_transfer_pak_loaded"
echo "Video-plugin='$_gfx_video_plugin'"
echo "Resolution='$_resolution'"
echo "Emulation-mode='$_emulation_mode'"
echo "Parameters='$_params_game_profile_parameters'"

echo "Additional-options="
_tab="    "
for _arg in "$@"; do
    echo "$_tab $_arg"
done
echo >&2

# [SOURCE] https://mupen64plus.org/wiki/index.php?title=UIConsoleUsage
echo mupen64plus "$@" --set Core[SaveSRAMPath]="$N64_SAVES_HOME" --gfx $_gfx_video_plugin --resolution $_resolution --emumode $_emulation_mode_id --sshotdir "$N64_SCREENSHOTS_HOME" $_all_parts "$_n64_rom"
