#! /usr/bin/env bash
BASEDIR=$(dirname $0); cd $BASEDIR

. ./env-vars
require_var OUTPUT_AUDIO_FOLDER

# Updating package
# python3 -m pip install -U yt-dlp

while getopts "u:s:l:" FLAG
do
    case "${FLAG}" in
        u) # Resource URL option
            RSC_URL="$OPTARG"
            ;;
        s) # Playlist start index
            PLAYLIST_START=${OPTARG:-1}
            PLAYLIST_FLAG="true"
            ;;
        l) # List of URLs
            LIST_FILE="$OPTARG"
            ;;
    esac
done

download_audio() {
    local _url=${1:-}

    if [ "$PLAYLIST_FLAG" = "true" ];
    then
        # youtube-dl
        yt-dlp -x --audio-format mp3 --audio-quality 4 --playlist-start $PLAYLIST_START --rm-cache-dir $_url
    else
        # youtube-dl
        yt-dlp -x --audio-format mp3 --audio-quality 4 --rm-cache-dir $_url
    fi
}

pack_downloads() {
    lastZipFile="$(ls | grep .*\\.zip | sort -V | tail -1)"
    audioPart="audio"
    extensionPart=".zip"
    audioLength=${#audioPart}
    extensionLength=${#extensionPart}

    if [ -z "$lastZipFile" ];
    then
        counter=0
    else
        lastZipFileLength=${#lastZipFile}
        counter=${lastZipFile:$audioLength:$(($lastZipFileLength-$audioLength-$extensionLength))}
        counter=$(($counter+1))
    fi

    zip -r $audioPart$counter$extensionPart *.mp3

    rm -f *.mp3
}

if [ ! -d "$OUTPUT_AUDIO_FOLDER" ]; then
  mkdir -p "$OUTPUT_AUDIO_FOLDER"
fi

cd "$OUTPUT_AUDIO_FOLDER"

if [ -z "$LIST_FILE" ];
then
    download_audio $RSC_URL
else
    PLAYLIST_FLAG="false"

    while IFS= read -r line; do
        download_audio "$line"
    done < $LIST_FILE

    cat $LIST_FILE
    rm -f $LIST_FILE
fi

pack_downloads
